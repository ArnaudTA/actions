name: Wait for gitlab pipeline success

on:
  workflow_call:
    secrets:
      GITLAB_URL:
        required: true
      GITLAB_TOKEN:
        required: true
      GITLAB_PROJECT_ID:
        required: true
    inputs:
      # SUCCESS_STRATEGY:
      #   type: string
      #   description: |
      #     Behavior if multiple pipelines are found:
      #       last: the most recent pipeline should meet validation criteria
      #   default: last
      # FAIL_STRATEGY:
      #   type: string
      #   description: |
      #     Behavior if multiple pipelines are found:
      #       onLastError: the most recent pipeline should not be failed 
      #   default: onLastError
      SHA:
        type: string
      REF:
        type: string

      CREATED_BEFORE:
        description: |
          https://docs.gitlab.com/api/pipelines/#list-project-pipelines
          respect the `created_before` format 2019-03-15T08:00:00Z
          We recommend not define it and current time will be used
        type: string
        default: auto
      CREATED_AFTER:
        description: |
          https://docs.gitlab.com/api/pipelines/#list-project-pipelines
          respect the `created_after` format 2019-03-15T08:00:00Z
          We recommend defining it before running your sync job and pass it here
        type: string
      CHECK_INTERVAL:
        type: number
        description: pause in second between interval
        default: 5
      MAX_RETRIES:
        type: number
        description: number of retries
        default: 30
      GRACE_PERIOD:
        type: number
        description: time to wait before launching checks, in seconds
        default: 0

jobs:
  sync:
    runs-on: ubuntu-latest
    name: Synchronize app with distant platform
    steps:
      - name: check-inputs
        run: |
          ERRORS=""
          VALID=1
          [[ -n "${{ secrets.GITHUB_TOKEN }}" ]] && unset VALID && ERRORS="Missing GITHUB_TOKEN"
          [[ -n "${{ secrets.GILTAB_PROJECT_NAME }}" ]] && unset VALID && ERRORS="${ERRORS}\nMissing GILTAB_PROJECT_NAME"
          [[ -n "${{ secrets.GITLAB_PROJECT_ID }}" ]] && unset VALID && ERRORS="${ERRORS}\nMissing GITLAB_PROJECT_ID"
          [[ -n "${{ secrets.GITLAB_URL }}" ]] && unset VALID && ERRORS="${ERRORS}\nMissing GITLAB_URL"
          [[ -n "$VALID" ]] && echo ERRORS && exit 1

      - name: call distant pipeline for synchronisation
        run: |
          [[ ${{ inputs.GRACE_PERIOD }} -gt 0 ]] && read -t ${{ inputs.GRACE_PERIOD }} -p "Wait ${{ inputs.GRACE_PERIOD }} second before checking..."
          echo "Starting check loop"

          for i in {0..${{ inputs.MAX_RETRIES }}}; do
            echo "Try nÂ°$i"
            RESULT=curl -X GET --fail \
              --header 'PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}' \
              "${{ secrets.GITLAB_URL }}/api/v4/projects/${{ secrets.GITLAB_PROJECT_ID }}/pipelines?created_after=${{ inputs.CREATED_AFTER }}&created_before=${{ inputs.CREATED_BEFORE }}&ref=${{ inputs.REF }}&sha=${{ inputs.SHA }}"
            
            length=$(echo $RESULT | yq '. | length')

            [[ $length -eq 0 ]] && echo No pipeline found && continue
            
            failed=$(echo $RESULT | yq '.[0].status == "failed"')
            [[ $failed == "true" ]] && echo Pipeline is failed && exit 1

            success=$(echo $RESULT | yq '.[0].status == "success"')
            [[ $success == "true" ]] && echo Pipeline is success && exit 0
          done

          echo Timeout exceeded
          exit 1

