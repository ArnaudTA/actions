name: Wait for gitlab pipeline success

on:
  workflow_call:
    secrets:
      GITLAB_URL:
        required: true
      GITLAB_TOKEN:
        required: true
      GITLAB_PROJECT_ID:
        required: true
    inputs:
      # SUCCESS_STRATEGY:
      #   type: string
      #   description: |
      #     Behavior if multiple pipelines are found:
      #       last: the most recent pipeline should meet validation criteria
      #   default: last
      # FAIL_STRATEGY:
      #   type: string
      #   description: |
      #     Behavior if multiple pipelines are found:
      #       onLastError: the most recent pipeline should not be failed 
      #   default: onLastError
      SHA:
        type: string
      REF:
        type: string

      CREATED_BEFORE:
        description: |
          https://docs.gitlab.com/api/pipelines/#list-project-pipelines
          respect the `created_before` format 2019-03-15T08:00:00Z
          We recommend not define it and current time will be used
        type: string
      CREATED_AFTER:
        description: |
          https://docs.gitlab.com/api/pipelines/#list-project-pipelines
          respect the `created_after` format 2019-03-15T08:00:00Z
          We recommend defining it before running your sync job and pass it here
        type: string
      CHECK_INTERVAL:
        type: number
        description: pause in second between interval
        default: 5
      MAX_RETRIES:
        type: number
        description: number of retries
        default: 30
      GRACE_PERIOD:
        type: number
        description: time to wait before launching checks, in seconds
        default: 0
      PIPELINE_ID:
        type: string
        description: If you know the pipeline ID
        required: false

jobs:
  wait-without-id:
    if: ${{ inputs.PIPELINE_ID == '' }}
    runs-on: ubuntu-latest
    name: Waiting for pipeline end result
    steps:
      - name: List pipelines and check (no PIPELINE_ID)
        run: |
          # CREATED_BEFORE=${{ inputs.CREATED_BEFORE }}
          # [[ $CREATED_BEFORE == "auto" ]] && CREATED_BEFORE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          echo "Wait ${{ inputs.GRACE_PERIOD }} second before checking..."
          [[ ${{ inputs.GRACE_PERIOD }} -gt 0 ]] && sleep ${{ inputs.GRACE_PERIOD }}
          echo "Starting check loop"

          for i in {0..${{ inputs.MAX_RETRIES }}}; do
            [[ -f pipeline.yaml ]] && rm pipeline.yaml

            echo "Try n°$i"
            curl -X GET --fail \
              --header 'PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}' \
              "${{ secrets.GITLAB_URL }}/api/v4/projects/${{ secrets.GITLAB_PROJECT_ID }}/pipelines?created_after=${{ inputs.CREATED_AFTER }}&created_before=${{ inputs.CREATED_BEFORE }}&ref=${{ inputs.REF }}&sha=${{ inputs.SHA }}" \
              -o pipeline.yaml
            
            cat pipeline.yaml
            length=$(yq '. | length' pipeline.yaml)

            [[ $length -eq 0 ]] && echo No pipeline found && continue
            
            failed=$(yq '.[0].status == "failed"' pipeline.yaml)
            [[ $failed == "true" ]] && echo Pipeline is failed && exit 1

            success=$(yq '.[0].status == "success"' pipeline.yaml)
            [[ $success == "true" ]] && echo Pipeline is success && exit 0
            sleep ${{ inputs.CHECK_INTERVAL }}
          done

          echo Timeout exceeded
          exit 1

  wait-with-id:
    if: ${{ inputs.PIPELINE_ID != '' }}
    runs-on: ubuntu-latest
    name: Waiting for pipeline end result
    steps:
      - name: Get pipeline by ID and check (with PIPELINE_ID)
        if: ${{ inputs.PIPELINE_ID != '' }}
        run: |
          echo "Wait ${{ inputs.GRACE_PERIOD }} second before checking..."
          [[ ${{ inputs.GRACE_PERIOD }} -gt 0 ]] && sleep ${{ inputs.GRACE_PERIOD }}
          [[ -f pipeline.yaml ]] && rm pipeline.yaml

          echo "Starting check loop"

          for i in {0..${{ inputs.MAX_RETRIES }}}; do
            echo "Try n°$i"
            curl -X GET --fail \
              --header 'PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}' \
              "${{ secrets.GITLAB_URL }}/api/v4/projects/${{ secrets.GITLAB_PROJECT_ID }}/pipelines/${{ inputs.PIPELINE_ID }}" -o pipeline.yaml

            failed=$(yq '.status == "failed"' pipeline.yaml)
            [[ $failed == "true" ]] && echo Pipeline is failed && exit 1

            success=$(yq '.status == "success"' pipeline.yaml)
            [[ $success == "true" ]] && echo Pipeline is success && exit 0
            sleep ${{ inputs.CHECK_INTERVAL }}
          done

          echo Timeout exceeded
          exit 1

